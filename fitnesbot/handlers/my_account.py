from aiogram.fsm.context import FSMContext

from fitnesbot.utils.basemodel import BasicInitialisationBot
from aiogram import F
from aiogram.types import CallbackQuery
from fitnesbot.keybords.inline import my_account_menu
from fitnesbot.keybords.fabrics import inline_builder_sql, pagination_my_sports_exercises_in_training_kb, \
    playlists_menu, pagination_my_training_programme_sport_exercise_kb
from fitnesbot.keybords import builders
from fitnesbot.utils.states import CreateMyWorkout, MyWorkoutProgrammeDay
from fitnesbot.utils.func import MY_WORKOUT_DAY, CALL_MUSCLE_GROUP


class MyAccount(BasicInitialisationBot):
    async def my_account_cmd(self, call: CallbackQuery):
        """
            –ü–æ–≤–µ—Ä—Ç–∞—î Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É
        """
        await call.message.edit_text(text=f"–ü—Ä–∏–≤—ñ—Ç {call.from_user.first_name}! –¶–µ —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç. "
                                          f"–ú–æ–∂–µ—à –ø–æ—á–∏–Ω–∞—Ç–∏ —Ç–∏—á—è—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º", reply_markup=my_account_menu)
        await call.answer()

    async def my_training_account(self, call: CallbackQuery) -> None:
        """
            –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —è–∫—â–æ —î —Ç–æ –ø–µ–≤–µ—Ä—Ç–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î
            —Ç–æ –ø—Ä–æ–ø–æ–Ω—É—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        """
        response = await self.db_manager.check_if_the_user_has_any_training(call.from_user.id)
        if response[0] == 0:
            recommendation_response = await self.db_manager.view_the_index_of_recommendations(call.from_user.id)
            rec_text = "–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó üîîüí°" if recommendation_response == 0 else "–í–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó üîïüí°"
            button_list = [("–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è üèãÔ∏è‚Äç‚ôÇÔ∏è‚úèÔ∏è", "create_training")]
            await call.message.edit_text(
                text="–¢–∞–∫ —è–∫ —É –≤–∞—Å –Ω–µ –º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∏ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏, "
                     "–∞–ª–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç, "
                     "—â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω—à–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–µ",
                reply_markup=inline_builder_sql(button_list, sizes=1, back_cb="my_account",
                                                add_text=rec_text, add_cb="recommendations_for_the_disease"))
        else:
            button_list = [("–ú–æ—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è üí™üèãÔ∏è‚Äç‚ôÇÔ∏è", "my_training_programme_day"),
                           ("–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è üóëÔ∏èüèãÔ∏è‚Äç‚ôÇÔ∏è", "delete_my_training_account"), ]
            await call.message.edit_text(text="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
                                         reply_markup=inline_builder_sql(button_list, sizes=1, back_cb="my_account"))

    async def create_my_workout(self, call: CallbackQuery, state: FSMContext):
        """
            –ø–æ—á–∏—Ç–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞,
            response –ø–µ—Ä–µ–≤—ñ—Ä—î —á–∏—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å
            esponse == 0 –ø—Ä–æ—Å–∏–º–æ —Å–ø–æ—á–∞—Ç–∫—É –æ–±—Ä–∞—Ç–∏ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è
        """
        response = await self.db_manager.check_uses_disease(call.from_user.id)

        if response == 0:
            await call.message.delete()
            await self.bot.send_message(
                call.from_user.id,
                text="–ü—Ä–∏–≤—ñ—Ç! –°–ø–æ—á–∞—Ç–∫—É —Ç–∏—Ü—è–π –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞ –≤–∏–±–µ—Ä–∏ –≤—Å—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è —è–∫—ñ –≤ —Ç–µ–±–µ —î, "
                     "—â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω—Ç–∞—Ü—ñ—ó –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–º –≤–ø—Ä–∞–∞",
                reply_markup=builders.web_keyboard_builder(txt="–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä–∏ —Å–≤–æ—ó –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è",
                                                           webapp="/users/disease")
            )
        else:
            # await call.message.delete()
            response = await self.db_manager.my_workout_day()
            await state.set_state(CreateMyWorkout.my_workout_day)
            await self.bot.send_message(call.from_user.id, text="–û–±–∏—Ä–∞–π –¥–µ–Ω—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
                                        reply_markup=inline_builder_sql(response, back_cb="my_account_workout"))

    async def create_my_workout_load_workout_day(self, call: CallbackQuery, state: FSMContext):
        """
            –ü–æ–≤–µ—Ä—Ç–∞—î Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≥—Ä—É–ø–∞–º–∏ –º—è–∑—ñ–≤
            –æ–±–Ω–æ–≤–ª—è—î—Ç CreateMyWorkout.workout_day
        """
        response = await self.db_manager.muscle_group_inline()
        await state.update_data(my_workout_day=MY_WORKOUT_DAY.get(call.data))
        await state.set_state(CreateMyWorkout.my_muscle_group)
        data = await state.get_data()
        print(f"create_my_workout_load_workout_day {data}")
        await call.message.edit_text(text="–û–±–∏—Ä–∞–π –º'—è–∑–æ–≤—É –≥—Ä—É–ø—É",
                                     reply_markup=inline_builder_sql(response, sizes=3, back_cb="my_account"))

    async def create_my_workout_load_muscle_group(self, call: CallbackQuery, state: FSMContext):
        """
            –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–µ–æ —Ç–∞ –Ω–∞–∑–≤—É –≤–ø—Ä–∞–≤–∏ + –ø–∞–≥—ñ–Ω–∞—Ü–∏—è
            –æ–±–Ω–æ–≤–ª—è—î—Ç CreateMyWorkout.muscle_group
            recommendation_response –º—É—Å—Ç–∏—Ç—å —ñ–Ω–¥–µ–∫—Å —Ä–µ–∫–æ–º–µ–¥–Ω–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (on/off)
            recommendation_response == 1 —Ç–æ–¥—ñ –æ—Ç—Ä–∏–º—ñ–µ–º–æ id –ø—Ä–æ—Ç–∏–≤–æ–∫–∞–∑–∞–Ω–∞–Ω—å –ø–æ —Å–ø–æ—Ç—Ä–∏–≤–Ω–∏—Ö –≤–ø—Ä–∞–≤–∞—Ö
        """
        muscle_id = CALL_MUSCLE_GROUP.get(call.data)
        recommendation_response = await self.db_manager.view_the_index_of_recommendations(call.from_user.id)
        if recommendation_response == 1:
            response = await self.db_manager.exercises_that_are_not_recommended_for_the_disease(call.from_user.id)
            if response is not None:
                exercise_id_list = [j for i in response for j in i]
            else:
                exercise_id_list = 0
            response_sports_exercises = await self.db_manager.my_sports_exercises_in_training(
                muscle_id=muscle_id, exercise_ids=exercise_id_list)
        else:
            response_sports_exercises = await self.db_manager.my_sports_exercises_in_training(muscle_id=muscle_id,
                                                                                              exercise_ids=0)
        await state.update_data(my_muscle_group=muscle_id)
        await state.set_state(CreateMyWorkout.my_sporting_exercise)
        await state.update_data(my_sporting_exercise=response_sports_exercises[0][1])
        await call.message.edit_text(
            text=f'<b>–ù–∞–∑–≤–∞<a href="{response_sports_exercises[0][0]}">:</a></b> {response_sports_exercises[0][1]}',
            reply_markup=pagination_my_sports_exercises_in_training_kb())

    async def create_my_workout_load_sporting_exercise(self, call: CallbackQuery, state: FSMContext):
        """
            –¶–µ–π callback –¥–æ–¥–∞—î –≤–ø—Ä–∞–≤—É –≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è(–ë–î)
        """
        data = await state.get_data()
        print(f"create_my_workout_load_sporting_exercise {data}")
        user_id = await self.db_manager.check_telegram_id(call.from_user.id)
        sporting_exercise_id = await self.db_manager.check_sporting_exercise_id(data.get('my_sporting_exercise'))
        await self.db_manager.add_an_exercise_to_my_workout_routine(user_id=user_id,
                                                                    workout_day=data.get('my_workout_day'),
                                                                    muscle_group=data.get('my_muscle_group'),
                                                                    sporting_exercise_id=sporting_exercise_id
                                                                    )
        await call.answer(text=f'–í–ø—Ä–∞–≤–∞ {data.get("my_sporting_exercise")} –¥–æ–¥–∞–Ω–∞')

    async def playlists_menu(self, call: CallbackQuery):
        """
            –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ–Ω—é –∑ –º—É–∑–∏—á–Ω–∏–º–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏
        """
        response = await self.db_manager.music_playlists()
        await call.message.edit_text("–û—Å—å –ø–ª–µ–π–ª–∏—Å—Ç–∏ Spotify –¥–ª—è –≤–∞—à–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –ü—Ä–∏—î–º–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è",
                                     reply_markup=playlists_menu(response))
        await call.answer()

    async def updating_the_user_recommendation_index(self, call: CallbackQuery) -> None:
        """
            –≤–º–∏–∫–∞—î–º–æ –∞–±–æ –≤–∏–º–µ–∫–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        recommendation_response = await self.db_manager.view_the_index_of_recommendations(call.from_user.id)
        await self.db_manager.update_the_recommendation_index(rec_index=1 if recommendation_response == 0 else 0,
                                                              telegram_id=call.from_user.id)
        await call.answer(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –±—É–ª–æ —É–≤—ñ–º–∫–Ω—É—Ç–æ" if recommendation_response == 0 else "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –±—É–ª–æ –≤–∏–º–∫–Ω—É—Ç–æ")
        await self.my_training_account(call=call)

    async def delete_my_workout(self, call: CallbackQuery):
        """
            –í–∏–¥–∞–ª—è—î —ñ–Ω–Ω—É—é—á—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        """
        await self.db_manager.delete_user_workout(call.from_user.id)
        await call.answer(text="–í–∞—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ!!!")

    async def the_day_of_my_training_programme(self, call: CallbackQuery, state: FSMContext):
        await state.set_state(MyWorkoutProgrammeDay.my_training_programme_day)
        response = await self.db_manager.my_training_program_training_day(telegram_id=call.from_user.id)
        await call.message.edit_text(text="–¶–µ –¥–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∞—à–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏",
                                     reply_markup=inline_builder_sql(buttons=response, back_cb="my_account_workout"))

    async def a_sporting_exercise_in_my_training_programme(self, call: CallbackQuery, state: FSMContext):
        await state.update_data(my_training_programme_day=call.data)
        response = await self.db_manager.my_training_programme_sport_exercise(telegram_id=call.from_user.id,
                                                                              call_workout_day=call.data)
        await call.message.edit_text(text=f'<b>–ù–∞–∑–≤–∞<a href="{response[0][0]}">:</a></b> {response[0][1]}',
                                     reply_markup=pagination_my_training_programme_sport_exercise_kb())
        await call.answer()

    async def run(self):
        self.dp.callback_query.register(self.my_account_cmd, F.data == "my_account")
        self.dp.callback_query.register(self.my_training_account, F.data == "my_account_workout")
        self.dp.callback_query.register(self.create_my_workout, F.data == 'create_training')
        self.dp.callback_query.register(self.create_my_workout_load_workout_day, F.data.in_([
            'call_worckout_day_monday', 'call_worckout_day_tuesday', 'call_worckout_day_wednesday',
            'call_worckout_day_thursday', 'call_worckout_day_friday', 'call_worckout_day_saturday',
            'call_worckout_day_sunday']), CreateMyWorkout.my_workout_day)
        self.dp.callback_query.register(self.create_my_workout_load_muscle_group, F.data.in_([
            "muscle2", "muscle1", "muscle3", "muscle4", "muscle5",
            "muscle6", "muscle7", "muscle8", "muscle9", "muscle10"]), CreateMyWorkout.my_muscle_group)
        self.dp.callback_query.register(self.create_my_workout_load_sporting_exercise,
                                        F.data == "add_to_your_workout")
        self.dp.callback_query.register(self.updating_the_user_recommendation_index,
                                        F.data == "recommendations_for_the_disease")
        self.dp.callback_query.register(self.the_day_of_my_training_programme, F.data == "my_training_programme_day")
        self.dp.callback_query.register(self.a_sporting_exercise_in_my_training_programme, F.data.in_([
            'call_worckout_day_monday', 'call_worckout_day_tuesday', 'call_worckout_day_wednesday',
            'call_worckout_day_thursday', 'call_worckout_day_friday', 'call_worckout_day_saturday',
            'call_worckout_day_sunday']), MyWorkoutProgrammeDay.my_training_programme_day)
        self.dp.callback_query.register(self.delete_my_workout, F.data == "delete_my_training_account")
        self.dp.callback_query.register(self.playlists_menu, F.data == "Playlists")
