import pytest
from unittest.mock import AsyncMock

from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

from fitnesbot.handlers.my_account import MyAccount
from fitnesbot.keybords import builders
from fitnesbot.keybords.fabrics import inline_builder_sql
from fitnesbot.keybords.inline import my_account_menu
from tests.utils import TEST_USER, TEST_CHAT

my_account = MyAccount()
rec_text = "–í–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó üîïüí°"
button_list = [("–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è üèãÔ∏è‚Äç‚ôÇÔ∏è‚úèÔ∏è", "create_training")]

@pytest.mark.asyncio
async def test_my_account_cmd():
    call = AsyncMock()
    await my_account.my_account_cmd(call)

    call.message.edit_text.assert_called_with(text=f"–ü—Ä–∏–≤—ñ—Ç {call.from_user.first_name}! –¶–µ —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç. "
                                                   f"–ú–æ–∂–µ—à –ø–æ—á–∏–Ω–∞—Ç–∏ —Ç–∏—á—è—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º", reply_markup=my_account_menu)
    call.message.edit_text.assert_called_once()
@pytest.mark.asyncio
async def test_my_training_account(db_manager):
    call = AsyncMock()
    await my_account.my_training_account(call=call)
    call.message.edit_text.assert_called_with(text="–¢–∞–∫ —è–∫ —É –≤–∞—Å –Ω–µ –º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∏ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏, "
                                                   "–∞–ª–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç, "
                                                   "—â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω—à–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–µ",
                                              reply_markup=inline_builder_sql(button_list, sizes=1,
                                                                              back_cb="my_account",
                                                                              add_text=rec_text,
                                                                              add_cb="recommendations_for_the_disease"))
    call.message.edit_text.assert_called_once()


@pytest.mark.asyncio
async def test_create_my_workout(db_manager, memory_storage, bot):
    call = AsyncMock()
    recommendation_response = 1
    await my_account.updating_the_user_recommendation_index(call=call)

    call.answer.assert_called_with(
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –±—É–ª–æ —É–≤—ñ–º–∫–Ω—É—Ç–æ" if recommendation_response == 0 else "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –±—É–ª–æ –≤–∏–º–∫–Ω—É—Ç–æ")
    call.message.edit_text.assert_called_once()

@pytest.mark.asyncio
async def test_delete_my_workout(db_manager, memory_storage, bot):
    call = AsyncMock()
    await my_account.delete_my_workout(call=call)

    call.answer.assert_called_with(text="–í–∞—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ!!!")
    call.answer.assert_called_once()
